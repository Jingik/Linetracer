Library ieee;
use ieee.std_logic_1164.all;

entity LineTracer is
   port(Counter_CK : in std_logic;
	Sensor : in std_logic_vector(7 downto 0);
	LED : out std_logic_vector(7downto 0);
	Con : in std_logic;
	MT_L:buffer std_logic;
	MT_R:buffer std_logic;
	  --sevensegment 
         Sg0 : out std_logic_vector(6 downto 0);
         Sg1 : out std_logic_vector(6 downto 0);
         Sg2 : out std_logic_vector(6 downto 0);
         Sg3 : out std_logic_vector(6 downto 0);
	push1            : in std_logic;
	push2	 : in std_logic;
	push3	 : in std_logic);
end LineTracer;

architecture true of LineTracer is
	component segment is
	port(
	  kin : integer range 0 to 9;
       seg : out STD_LOGIC_VECTOR (6 downto 0));
end component;
component segment_two is
      port(
         kin      : integer range 0 to 9; 
         seg      : out std_logic_vector (6 downto 0));
   end component;

 signal Velocity_int1    : integer range 0 to 9 := 0;
   signal Velocity_int2   : integer range 0 to 9 := 0;
   signal Velocity_int3   : integer range 0 to 9 := 0;
   signal Velocity_int4   : integer range 0 to 9 := 0;
   signal ConL   : integer;
   signal ConR   : integer;
   signal ConST  : integer;
 begin
     LED<= Sensor;
   process( ConL, ConR, Con,Counter_CK,push2,push3)
      variable CT : integer range 0 to 5000000 := 0;
      variable CT1 : integer range 0 to 5000000 := 0;
      variable Fg : integer;
   begin
if( Con'event and Con = '1') then 
            if(CT1 =50000) then 
               CT1 := 0;
            else 
               CT1 := CT1 + 1;
            end if;
         end if;
      if(push2 = '0') then   
      Fg := 1;
      end if;
  if(push3 = '0') then
      Fg := 0;
      end if;
 if(Fg = 1) then
case Sensor is
when "01111111" => ConL <=49999; conR <= 0;ConST  <=0;
      when "10111111" => ConL <=45000; ConR <= 1500; ConST  <=0;
      when "11011111" => ConL <=42500; ConR <= 3000; ConST  <=0;
      when "11101111" => ConL <=47500; ConR <=47500; ConST  <=0;
      when "11110111" => ConL <=47500; ConR <=47500; ConST  <=0;
      when "11111011" => ConL <=3000;  ConR <=42500; ConST  <=0;
      when "11111101" => ConL <=1500;  ConR <=45000;ConST  <=0;
      when "11111110" => ConL <=0;     ConR <=49999; ConST  <=0;
      when "00111111" => ConL <=49999; ConR <=0; ConST  <=0;
      when "10011111" => ConL <=47500; ConR <=1500; ConST  <=0;
      when "11001111" => ConL <=45000; ConR <=3000;ConST<=0;
      when "11100111" => ConL <=47500; ConR <=47500;ConST<=0;
      when "11110011" => ConL <=3000;  ConR <=45000;ConST<=0;
      when "11111001" => ConL <=1500;  ConR <=47500;ConST<=0;
      when "11111100" => ConL <=0;     ConR <=49999;ConST<=0;
      when "00000000" => ConL <=49999; ConR <=49999;ConST<=0;
      when "11111111" => ConL <=0;     ConR <=0;ConST<=1;
      when others     => ConL <=49999; ConR <=49999; ConST<=0;
      end case;
 else
      case Sensor is
      when "01111111" => ConL <=25000; ConR <= 0; else
      case Sensor is
      when "01111111" => ConL <=25000; ConR <= 0;ConST<=0;
      when "10111111" => ConL <=22500; ConR <= 750; ConST<=0;
      when "11011111" => ConL <=21250; ConR <= 1500; ConST<=0;
      when "11101111" => ConL <=23750; ConR <=23750; ConST<=0;
      when "11110111" => ConL <=23750; ConR <=23750; ConST<=0;
      when "11111011" => ConL <=1500;  ConR <=21250; ConST<=0;
      when "11111101" => ConL <=750;  ConR <=22500; ConST<=0;
      when "11111110" => ConL <=0;     ConR <=25000; ConST<=0;
      when "00111111" => ConL <=25000; ConR <=0; ConST<=0;
      when "10011111" => ConL <=22500; ConR <=750; ConST<=0;
      when "11001111" => ConL <=21250; ConR <=1500;ConST<=0;
      when "11100111" => ConL <=23750; ConR <=23750;ConST<=0;
      when "11110011" => ConL <=1500;  ConR <=22500;ConST<=0;
      when "11111001" => ConL <=750;  ConR <=23750;ConST<=0;
      when "11111100" => ConL <=0;     ConR <=25000;ConST<=0;
      when "00000000" => ConL <=25000; ConR <=25000;ConST<=0;
      when "11111111" => ConL <=0;     ConR <=0;ConST<=1;
      when others     => ConL <=25000; ConR <=25000; ConST<=0;
      end case;
      
      end if;
 
        if(CT1<ConR) then 
            MT_R<='1'; 
            SG0 <= "0001000"; 
           SG1 <= "1111111";
            else
            MT_R<='0';
         end if;
         
           if(CT1<ConL) then 
            MT_L<='1';  
            Sg0 <= "1000111"; 
            Sg1 <= "1111111";
            else
            MT_L<='0';
         end if;
         
         if(push1 = '0') then
         Velocity_int1 <= 0;
         Velocity_int2 <= 0;
         Velocity_int3 <= 0; 
         Velocity_int4 <= 0;
         ConST <= 1;  
         else
         if(ConST<=0)then 
               if(Counter_CK'event and Counter_CK='1') then

                  if(CT = 500000) then 
                     CT := 0;
                     Velocity_int1 <= Velocity_int1 + 1; 
                  if(Velocity_int1 = 9) then
                  Velocity_int2 <= Velocity_int2 + 1;
                     Velocity_int1 <= 0;
                     if(Velocity_int2 = 9) then
                     Velocity_int3 <= Velocity_int3 + 1;
                        Velocity_int2 <= 0;
                           if(Velocity_int3 = 9) then
                              Velocity_int4 <= Velocity_int4 + 1;
                                 Velocity_int3 <= 0;
                                 if(Velocity_int4= 5) then
                                    Velocity_int4 <= 0;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        else 
                     CT := CT + 1;
                     end if;
                     end if;
                     else
                     Velocity_int1 <= Velocity_int1;
                     Velocity_int2 <= Velocity_int2;
                     Velocity_int3 <= Velocity_int3;
                     Velocity_int4 <= Velocity_int4;
                     end if;
                     end if;
                     end process;
            --U1 : segment_two port map(Velocity_int1, Sg0);
            --U2 : segment_two port map(Velocity_int2, Sg1);
            U3 : segment_two port map(Velocity_int3, Sg2);
            U4 : segment port map(Velocity_int4, Sg3);
      end ture;